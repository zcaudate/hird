// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // INSTRUCTION
    // (i) xx a cccccc ddd jjj
    
    // controlA as !instruction[15]
    Not(in=instruction[15], out=controlA);
    // controlC as !!instruction[15]
    Not(in=controlA, out=controlC);
    
    // (i) xx a cccccc (d)dd jjj
    // Set controlALUtoA if controlC and instruction[5]
    And(a=controlC, b=instruction[5], out=controlALUtoA);   
    
    // Select instruction or outALU to inputA on controlALUtoA
    Mux16(a=instruction, b=outALU, sel=controlALUtoA, out=inputA); 
    
    // loadA if controlA or controlALUtoA
    Or(a=controlA, b=controlALUtoA, out=loadA);
    
    // Declare A Register    
    ARegister(in=inputA, load=loadA, out=outA);
    
    // select A or M for inALU
    // i xx (a) cccccc ddd jjj
    Mux16(a=outA, b=inM, sel=instruction[12], out=inALU);   
    
    // loadD if controlC and instruction[4]
    // i xx a cccccc d(d)d jjj
    And(a=controlC, b=instruction[4], out=loadD);
    
    // Declare D Register
    DRegister(in=outALU, load=loadD, out=outD);    
    
    // Declare ALU
    // i xx a (c)(c)(c)(c)(c)(c) d(d)d jjj
    ALU(x=outD, y=inALU, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=outALU, zr=outZR, ng=outNG); // calculate
        
    // outA[0..14] => addressM
    Or16(a=false, b=outA, out[0..14]=addressM);
    
    // Set outALU to outputM of chip
    Or16(a=false, b=outALU, out=outM);

    // Set writeM of chip on controlC and instruction[3]
    // i xx a cccccc dd(d) jjj
    And(a=controlC, b=instruction[3], out=writeM);
    
    // Settings for `jeq`
    // i xx a cccccc ddd j(j)j
    And(a=outZR, b=instruction[1], out=jeq);    // is zero and jump if zero

    // Settings for `jlt`
    // i xx a cccccc ddd (j)jj 
    And(a=outNG, b=instruction[2], out=jlt);    // is neg and jump if neg
    
    // Setting outputPositive and outputNotPositive
    Or(a=outZR, b=outNG, out=outputNotPositive);
    Not(in=outputNotPositive, out=outputPositive); 

    // Settings for `jgt`
    // i xx a cccccc ddd jj(j)   
    And(a=outputPositive, b=instruction[0], out=jgt); // is pos and jump if pos
    
    // Set controlJumpA if either `jeq`, `jlt` or `jgt`
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=controlJumpA);              
    
    // loadPC if controlC and controlJumpA 
    And(a=controlC, b=controlJumpA, out=loadPC);
    
    // controlPCinc if not loadPC
    Not(in=loadPC, out=controlPCinc);
    
    // Declare PC
    PC(in=outA, inc=controlPCinc, load=loadPC, reset=reset, out[0..14]=pc);
}