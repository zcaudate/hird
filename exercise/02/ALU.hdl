// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // x zero / negate
    Mux16(a=x, b=false, sel=zx, out=xTz);
    Not16(in=xTz, out=xTzTnot);
    Mux16(a=xTz, b=xTzTnot, sel=nx, out=xTn);

    // y zero / negate
    Mux16(a=y, b=false, sel=zy, out=yTz);
    Not16(in=yTz, out=yTzTnot);
    Mux16(a=yTz, b=yTzTnot, sel=ny, out=yTn);

    // x + y OR x & y
    And16(a=xTn, b=yTn, out=xTandTy);
    Add16(a=xTn, b=yTn, out=xTaddTy);
    Mux16(a=xTandTy, b=xTaddTy, sel=f, out=res);

    // negate the output?
    Not16(in=res, out=resTnot);
    Mux16(a=res, b=resTnot, sel=no, out=out, out[15]=out15, out[0..7]=outleft, out[8..15]=outright);

    // output == 0 (zr)
    Or8Way(in=outleft, out=z0);
    Or8Way(in=outright, out=z1);
    Or(a=z0, b=z1, out=znot);
    Not(in=znot, out=zr);

    // output < 0 (ng)
    And(a=out15, b=true, out=ng);
}